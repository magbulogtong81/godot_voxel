name: 🐧 Linux Export Builds
on:
  push:
    branches: [ godot3.x, github_actions ]
  pull_request:
    branches: [ godot3.x ]

# Global Cache Settings
env:
  GODOT_BASE_BRANCH: 3.x
  SCONS_CACHE_LIMIT: 4096
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-editor:
    runs-on: "ubuntu-20.04"
    name: Editor


    strategy:
        matrix:
          include:

            - name: release-32bit-x86
              target: release
              arch: x86_32
              executable_name: linux_x11_32_debug
              tools: no
              
            - name: debug-32bit-x86
              target: release_debug
              arch: x86_32
              executable_name: linux_x11_32_release
              tools: no

            - name: release-64bit-x86_64
              target: release
              arch: x86_64
              executable_name: linux_x11_64_debug
              tools: no

            - name: debug-64bit-x86_64
              target: release_debug
              arch: x86_64
              executable_name: linux_x11_64_release
              tools: no

    

    steps:
      # Clone Godot
      - uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.x

      # Clone our module under the correct directory
      - uses: actions/checkout@v2
        with:
          path: modules/voxel
          ref: 626e8be29ac19fbcefbdabfbe361dca1f8445bb2
          fetch-depth: 0

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          #sudo cp -f modules/voxel/misc/sources.list /etc/apt/sources.
          
          cat > sources.list <<- EOF
          deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
          EOF
          echo "sources":"
          cat ./sources.list
          sudo cp -v ./sources.list /etc/apt/sources.list

          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm -y 

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}-${{matrix.target}}-${{matrix.arch}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}-${{matrix.target}}-${{matrix.arch}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --
          

      - name: checkout to recent working commit of voxel module
        run: |
          cd modules/voxel
          git checkout 626e8be29ac19fbcefbdabfbe361dca1f8445bb2
          cd ../..



      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all platform=x11 target=${{matrix.target}} arch=${{matrix.arch}} tools=${{matrix.tools}}

      # TODO Such tests are able to run from Godot 4.0 only
      # Execute unit tests for the editor
      #- name: Unit Tests
      #  run: |
      #    ./bin/godot.linuxbsd.opt.tools.64 --test

      # Make build available
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.executable_name}}-${{matrix.target}}-${{matrix.arch}}
          path: bin/*

